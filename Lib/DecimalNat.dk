T : Type.
t : Base.type.
[] Base.El t --> T.

0 : T.
Pos : DecimalNonZeroNat.T -> T.

def compare : T -> T -> Ordering.T.
[] compare 0 0 --> Ordering.EQ
[x] compare (Pos x) 0 --> Ordering.GT.
[y] compare 0 (Pos y) --> Ordering.LT.
[x, y] compare (Pos x) (Pos y) --> DecimalNonZeroNat.compare x y.

def Ord : Ord.T t := Ord.Cons t compare.
def Eq : Eq.T t := Ord.impliesEq t Ord.

def 1 := Pos DecimalNonZeroNat.1.
def 2 := Pos DecimalNonZeroNat.2.
def 3 := Pos DecimalNonZeroNat.3.
def 4 := Pos DecimalNonZeroNat.4.
def 5 := Pos DecimalNonZeroNat.5.
def 6 := Pos DecimalNonZeroNat.6.
def 7 := Pos DecimalNonZeroNat.7.
def 8 := Pos DecimalNonZeroNat.8.
def 9 := Pos DecimalNonZeroNat.9.

def parse_aux : T -> String.T -> T.
[acc] parse_aux acc (List.nil _) --> acc.
[tl] parse_aux 0 (List.cons _ Char.0 tl) --> parse_aux 0 tl.
[tl] parse_aux 0 (List.cons _ Char.1 tl) --> parse_aux 1 tl.
[tl] parse_aux 0 (List.cons _ Char.2 tl) --> parse_aux 2 tl.
[tl] parse_aux 0 (List.cons _ Char.3 tl) --> parse_aux 3 tl.
[tl] parse_aux 0 (List.cons _ Char.4 tl) --> parse_aux 4 tl.
[tl] parse_aux 0 (List.cons _ Char.5 tl) --> parse_aux 5 tl.
[tl] parse_aux 0 (List.cons _ Char.6 tl) --> parse_aux 6 tl.
[tl] parse_aux 0 (List.cons _ Char.7 tl) --> parse_aux 7 tl.
[tl] parse_aux 0 (List.cons _ Char.8 tl) --> parse_aux 8 tl.
[tl] parse_aux 0 (List.cons _ Char.9 tl) --> parse_aux 9 tl.
[acc, tl] parse_aux (Pos acc) (List.cons _ Char.0 tl) --> parse_aux (Pos (DecimalNonZeroNat.0_ acc)) tl.
[acc, tl] parse_aux (Pos acc) (List.cons _ Char.1 tl) --> parse_aux (Pos (DecimalNonZeroNat.1_ acc)) tl.
[acc, tl] parse_aux (Pos acc) (List.cons _ Char.2 tl) --> parse_aux (Pos (DecimalNonZeroNat.2_ acc)) tl.
[acc, tl] parse_aux (Pos acc) (List.cons _ Char.3 tl) --> parse_aux (Pos (DecimalNonZeroNat.3_ acc)) tl.
[acc, tl] parse_aux (Pos acc) (List.cons _ Char.4 tl) --> parse_aux (Pos (DecimalNonZeroNat.4_ acc)) tl.
[acc, tl] parse_aux (Pos acc) (List.cons _ Char.5 tl) --> parse_aux (Pos (DecimalNonZeroNat.5_ acc)) tl.
[acc, tl] parse_aux (Pos acc) (List.cons _ Char.6 tl) --> parse_aux (Pos (DecimalNonZeroNat.6_ acc)) tl.
[acc, tl] parse_aux (Pos acc) (List.cons _ Char.7 tl) --> parse_aux (Pos (DecimalNonZeroNat.7_ acc)) tl.
[acc, tl] parse_aux (Pos acc) (List.cons _ Char.8 tl) --> parse_aux (Pos (DecimalNonZeroNat.8_ acc)) tl.
[acc, tl] parse_aux (Pos acc) (List.cons _ Char.9 tl) --> parse_aux (Pos (DecimalNonZeroNat.9_ acc)) tl.

def parse : String.T -> T.
[tl] parse (List.cons _ Char.0 tl) --> parse_aux 0 tl.
[tl] parse (List.cons _ Char.1 tl) --> parse_aux 1 tl.
[tl] parse (List.cons _ Char.2 tl) --> parse_aux 2 tl.
[tl] parse (List.cons _ Char.3 tl) --> parse_aux 3 tl.
[tl] parse (List.cons _ Char.4 tl) --> parse_aux 4 tl.
[tl] parse (List.cons _ Char.5 tl) --> parse_aux 5 tl.
[tl] parse (List.cons _ Char.6 tl) --> parse_aux 6 tl.
[tl] parse (List.cons _ Char.7 tl) --> parse_aux 7 tl.
[tl] parse (List.cons _ Char.8 tl) --> parse_aux 8 tl.
[tl] parse (List.cons _ Char.9 tl) --> parse_aux 9 tl.

def print : T -> String.T.
[] print 0 --> String.cons Char.0 String.end.
[x] print (Pos x) --> DecimalNonZeroNat.print x.

def add : T -> T -> T.
[] add 0 0 --> 0.
[x] add (Pos x) 0 --> Pos x.
[y] add 0 (Pos y) --> Pos y.
[x, y] add (Pos x) (Pos y) --> Pos (DecimalNonZeroNat.add x y).

def fromUnary : UnaryNat.T -> T.
[] fromUnary UnaryNat.0 --> 0.
[x] fromUnary (UnaryNat.S x) --> Pos (DecimalNonZeroNat.fromUnary (UnaryNat.S x)).

def toUnary : T -> UnaryNat.T.
[] toUnary 0 --> UnaryNat.0.
[x] toUnary (Pos x) --> DecimalNonZeroNat.toUnary x.

def parseUnary (s : String.T) : UnaryNat.T := toUnary (parse s).
