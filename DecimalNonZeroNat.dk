T : Type.
t : Base.type.
[] Base.El t --> T.

1 : T.
2 : T.
3 : T.
4 : T.
5 : T.
6 : T.
7 : T.
8 : T.
9 : T.
1_ : T -> T.
2_ : T -> T.
3_ : T -> T.
4_ : T -> T.
5_ : T -> T.
6_ : T -> T.
7_ : T -> T.
8_ : T -> T.
9_ : T -> T.
0_ : T -> T.

def compare_aux : Ordering.T -> T -> T -> Ordering.T.
[acc] compare_aux acc 1 1 --> acc.
[] compare_aux _ 1 2 --> Ordering.LT.
[] compare_aux _ 1 3 --> Ordering.LT.
[] compare_aux _ 1 4 --> Ordering.LT.
[] compare_aux _ 1 5 --> Ordering.LT.
[] compare_aux _ 1 6 --> Ordering.LT.
[] compare_aux _ 1 7 --> Ordering.LT.
[] compare_aux _ 1 8 --> Ordering.LT.
[] compare_aux _ 1 9 --> Ordering.LT.
[] compare_aux _ 1 (0_ _) --> Ordering.LT.
[] compare_aux _ 1 (1_ _) --> Ordering.LT.
[] compare_aux _ 1 (2_ _) --> Ordering.LT.
[] compare_aux _ 1 (3_ _) --> Ordering.LT.
[] compare_aux _ 1 (4_ _) --> Ordering.LT.
[] compare_aux _ 1 (5_ _) --> Ordering.LT.
[] compare_aux _ 1 (6_ _) --> Ordering.LT.
[] compare_aux _ 1 (7_ _) --> Ordering.LT.
[] compare_aux _ 1 (8_ _) --> Ordering.LT.
[] compare_aux _ 1 (9_ _) --> Ordering.LT.
[] compare_aux _ 2 1 --> Ordering.GT.
[acc] compare_aux acc 2 2 --> acc.
[] compare_aux _ 2 3 --> Ordering.LT.
[] compare_aux _ 2 4 --> Ordering.LT.
[] compare_aux _ 2 5 --> Ordering.LT.
[] compare_aux _ 2 6 --> Ordering.LT.
[] compare_aux _ 2 7 --> Ordering.LT.
[] compare_aux _ 2 8 --> Ordering.LT.
[] compare_aux _ 2 9 --> Ordering.LT.
[] compare_aux _ 2 (0_ _) --> Ordering.LT.
[] compare_aux _ 2 (1_ _) --> Ordering.LT.
[] compare_aux _ 2 (2_ _) --> Ordering.LT.
[] compare_aux _ 2 (3_ _) --> Ordering.LT.
[] compare_aux _ 2 (4_ _) --> Ordering.LT.
[] compare_aux _ 2 (5_ _) --> Ordering.LT.
[] compare_aux _ 2 (6_ _) --> Ordering.LT.
[] compare_aux _ 2 (7_ _) --> Ordering.LT.
[] compare_aux _ 2 (8_ _) --> Ordering.LT.
[] compare_aux _ 2 (9_ _) --> Ordering.LT.
[] compare_aux _ 3 1 --> Ordering.GT.
[] compare_aux _ 3 2 --> Ordering.GT.
[acc] compare_aux acc 3 3 --> acc.
[] compare_aux _ 3 4 --> Ordering.LT.
[] compare_aux _ 3 5 --> Ordering.LT.
[] compare_aux _ 3 6 --> Ordering.LT.
[] compare_aux _ 3 7 --> Ordering.LT.
[] compare_aux _ 3 8 --> Ordering.LT.
[] compare_aux _ 3 9 --> Ordering.LT.
[] compare_aux _ 3 (0_ _) --> Ordering.LT.
[] compare_aux _ 3 (1_ _) --> Ordering.LT.
[] compare_aux _ 3 (2_ _) --> Ordering.LT.
[] compare_aux _ 3 (3_ _) --> Ordering.LT.
[] compare_aux _ 3 (4_ _) --> Ordering.LT.
[] compare_aux _ 3 (5_ _) --> Ordering.LT.
[] compare_aux _ 3 (6_ _) --> Ordering.LT.
[] compare_aux _ 3 (7_ _) --> Ordering.LT.
[] compare_aux _ 3 (8_ _) --> Ordering.LT.
[] compare_aux _ 3 (9_ _) --> Ordering.LT.
[] compare_aux _ 4 1 --> Ordering.GT.
[] compare_aux _ 4 2 --> Ordering.GT.
[] compare_aux _ 4 3 --> Ordering.GT.
[acc] compare_aux acc 4 4 --> acc.
[] compare_aux _ 4 5 --> Ordering.LT.
[] compare_aux _ 4 6 --> Ordering.LT.
[] compare_aux _ 4 7 --> Ordering.LT.
[] compare_aux _ 4 8 --> Ordering.LT.
[] compare_aux _ 4 9 --> Ordering.LT.
[] compare_aux _ 4 (0_ _) --> Ordering.LT.
[] compare_aux _ 4 (1_ _) --> Ordering.LT.
[] compare_aux _ 4 (2_ _) --> Ordering.LT.
[] compare_aux _ 4 (3_ _) --> Ordering.LT.
[] compare_aux _ 4 (4_ _) --> Ordering.LT.
[] compare_aux _ 4 (5_ _) --> Ordering.LT.
[] compare_aux _ 4 (6_ _) --> Ordering.LT.
[] compare_aux _ 4 (7_ _) --> Ordering.LT.
[] compare_aux _ 4 (8_ _) --> Ordering.LT.
[] compare_aux _ 4 (9_ _) --> Ordering.LT.
[] compare_aux _ 5 1 --> Ordering.GT.
[] compare_aux _ 5 2 --> Ordering.GT.
[] compare_aux _ 5 3 --> Ordering.GT.
[] compare_aux _ 5 4 --> Ordering.GT.
[acc] compare_aux acc 5 5 --> acc.
[] compare_aux _ 5 6 --> Ordering.LT.
[] compare_aux _ 5 7 --> Ordering.LT.
[] compare_aux _ 5 8 --> Ordering.LT.
[] compare_aux _ 5 9 --> Ordering.LT.
[] compare_aux _ 5 (0_ _) --> Ordering.LT.
[] compare_aux _ 5 (1_ _) --> Ordering.LT.
[] compare_aux _ 5 (2_ _) --> Ordering.LT.
[] compare_aux _ 5 (3_ _) --> Ordering.LT.
[] compare_aux _ 5 (4_ _) --> Ordering.LT.
[] compare_aux _ 5 (5_ _) --> Ordering.LT.
[] compare_aux _ 5 (6_ _) --> Ordering.LT.
[] compare_aux _ 5 (7_ _) --> Ordering.LT.
[] compare_aux _ 5 (8_ _) --> Ordering.LT.
[] compare_aux _ 5 (9_ _) --> Ordering.LT.
[] compare_aux _ 6 1 --> Ordering.GT.
[] compare_aux _ 6 2 --> Ordering.GT.
[] compare_aux _ 6 3 --> Ordering.GT.
[] compare_aux _ 6 4 --> Ordering.GT.
[] compare_aux _ 6 5 --> Ordering.GT.
[acc] compare_aux acc 6 6 --> acc.
[] compare_aux _ 6 7 --> Ordering.LT.
[] compare_aux _ 6 8 --> Ordering.LT.
[] compare_aux _ 6 9 --> Ordering.LT.
[] compare_aux _ 6 (0_ _) --> Ordering.LT.
[] compare_aux _ 6 (1_ _) --> Ordering.LT.
[] compare_aux _ 6 (2_ _) --> Ordering.LT.
[] compare_aux _ 6 (3_ _) --> Ordering.LT.
[] compare_aux _ 6 (4_ _) --> Ordering.LT.
[] compare_aux _ 6 (5_ _) --> Ordering.LT.
[] compare_aux _ 6 (6_ _) --> Ordering.LT.
[] compare_aux _ 6 (7_ _) --> Ordering.LT.
[] compare_aux _ 6 (8_ _) --> Ordering.LT.
[] compare_aux _ 6 (9_ _) --> Ordering.LT.
[] compare_aux _ 7 1 --> Ordering.GT.
[] compare_aux _ 7 2 --> Ordering.GT.
[] compare_aux _ 7 3 --> Ordering.GT.
[] compare_aux _ 7 4 --> Ordering.GT.
[] compare_aux _ 7 5 --> Ordering.GT.
[] compare_aux _ 7 6 --> Ordering.GT.
[acc] compare_aux acc 7 7 --> acc.
[] compare_aux _ 7 8 --> Ordering.LT.
[] compare_aux _ 7 9 --> Ordering.LT.
[] compare_aux _ 7 (0_ _) --> Ordering.LT.
[] compare_aux _ 7 (1_ _) --> Ordering.LT.
[] compare_aux _ 7 (2_ _) --> Ordering.LT.
[] compare_aux _ 7 (3_ _) --> Ordering.LT.
[] compare_aux _ 7 (4_ _) --> Ordering.LT.
[] compare_aux _ 7 (5_ _) --> Ordering.LT.
[] compare_aux _ 7 (6_ _) --> Ordering.LT.
[] compare_aux _ 7 (7_ _) --> Ordering.LT.
[] compare_aux _ 7 (8_ _) --> Ordering.LT.
[] compare_aux _ 7 (9_ _) --> Ordering.LT.
[] compare_aux _ 8 1 --> Ordering.GT.
[] compare_aux _ 8 2 --> Ordering.GT.
[] compare_aux _ 8 3 --> Ordering.GT.
[] compare_aux _ 8 4 --> Ordering.GT.
[] compare_aux _ 8 5 --> Ordering.GT.
[] compare_aux _ 8 6 --> Ordering.GT.
[] compare_aux _ 8 7 --> Ordering.GT.
[acc] compare_aux acc 8 8 --> acc.
[] compare_aux _ 8 9 --> Ordering.LT.
[] compare_aux _ 8 (0_ _) --> Ordering.LT.
[] compare_aux _ 8 (1_ _) --> Ordering.LT.
[] compare_aux _ 8 (2_ _) --> Ordering.LT.
[] compare_aux _ 8 (3_ _) --> Ordering.LT.
[] compare_aux _ 8 (4_ _) --> Ordering.LT.
[] compare_aux _ 8 (5_ _) --> Ordering.LT.
[] compare_aux _ 8 (6_ _) --> Ordering.LT.
[] compare_aux _ 8 (7_ _) --> Ordering.LT.
[] compare_aux _ 8 (8_ _) --> Ordering.LT.
[] compare_aux _ 8 (9_ _) --> Ordering.LT.
[] compare_aux _ 9 1 --> Ordering.GT.
[] compare_aux _ 9 2 --> Ordering.GT.
[] compare_aux _ 9 3 --> Ordering.GT.
[] compare_aux _ 9 4 --> Ordering.GT.
[] compare_aux _ 9 5 --> Ordering.GT.
[] compare_aux _ 9 6 --> Ordering.GT.
[] compare_aux _ 9 7 --> Ordering.GT.
[] compare_aux _ 9 8 --> Ordering.GT.
[acc] compare_aux acc 9 9 --> acc.
[] compare_aux _ 9 (0_ _) --> Ordering.LT.
[] compare_aux _ 9 (1_ _) --> Ordering.LT.
[] compare_aux _ 9 (2_ _) --> Ordering.LT.
[] compare_aux _ 9 (3_ _) --> Ordering.LT.
[] compare_aux _ 9 (4_ _) --> Ordering.LT.
[] compare_aux _ 9 (5_ _) --> Ordering.LT.
[] compare_aux _ 9 (6_ _) --> Ordering.LT.
[] compare_aux _ 9 (7_ _) --> Ordering.LT.
[] compare_aux _ 9 (8_ _) --> Ordering.LT.
[] compare_aux _ 9 (9_ _) --> Ordering.LT.
[] compare_aux _ (0_ _) 1 --> Ordering.GT.
[] compare_aux _ (0_ _) 2 --> Ordering.GT.
[] compare_aux _ (0_ _) 3 --> Ordering.GT.
[] compare_aux _ (0_ _) 4 --> Ordering.GT.
[] compare_aux _ (0_ _) 5 --> Ordering.GT.
[] compare_aux _ (0_ _) 6 --> Ordering.GT.
[] compare_aux _ (0_ _) 7 --> Ordering.GT.
[] compare_aux _ (0_ _) 8 --> Ordering.GT.
[] compare_aux _ (0_ _) 9 --> Ordering.GT.
[acc, x, y] compare_aux acc (0_ x) (0_ y) --> compare_aux acc x y.
[x, y] compare_aux _ (0_ x) (1_ y) --> compare_aux Ordering.LT x y.
[x, y] compare_aux _ (0_ x) (2_ y) --> compare_aux Ordering.LT x y.
[x, y] compare_aux _ (0_ x) (3_ y) --> compare_aux Ordering.LT x y.
[x, y] compare_aux _ (0_ x) (4_ y) --> compare_aux Ordering.LT x y.
[x, y] compare_aux _ (0_ x) (5_ y) --> compare_aux Ordering.LT x y.
[x, y] compare_aux _ (0_ x) (6_ y) --> compare_aux Ordering.LT x y.
[x, y] compare_aux _ (0_ x) (7_ y) --> compare_aux Ordering.LT x y.
[x, y] compare_aux _ (0_ x) (8_ y) --> compare_aux Ordering.LT x y.
[x, y] compare_aux _ (0_ x) (9_ y) --> compare_aux Ordering.LT x y.
[] compare_aux _ (1_ _) 1 --> Ordering.GT.
[] compare_aux _ (1_ _) 2 --> Ordering.GT.
[] compare_aux _ (1_ _) 3 --> Ordering.GT.
[] compare_aux _ (1_ _) 4 --> Ordering.GT.
[] compare_aux _ (1_ _) 5 --> Ordering.GT.
[] compare_aux _ (1_ _) 6 --> Ordering.GT.
[] compare_aux _ (1_ _) 7 --> Ordering.GT.
[] compare_aux _ (1_ _) 8 --> Ordering.GT.
[] compare_aux _ (1_ _) 9 --> Ordering.GT.
[x, y] compare_aux _ (1_ x) (0_ y) --> compare_aux Ordering.GT x y.
[acc, x, y] compare_aux acc (1_ x) (1_ y) --> compare_aux acc x y.
[x, y] compare_aux _ (1_ x) (2_ y) --> compare_aux Ordering.LT x y.
[x, y] compare_aux _ (1_ x) (3_ y) --> compare_aux Ordering.LT x y.
[x, y] compare_aux _ (1_ x) (4_ y) --> compare_aux Ordering.LT x y.
[x, y] compare_aux _ (1_ x) (5_ y) --> compare_aux Ordering.LT x y.
[x, y] compare_aux _ (1_ x) (6_ y) --> compare_aux Ordering.LT x y.
[x, y] compare_aux _ (1_ x) (7_ y) --> compare_aux Ordering.LT x y.
[x, y] compare_aux _ (1_ x) (8_ y) --> compare_aux Ordering.LT x y.
[x, y] compare_aux _ (1_ x) (9_ y) --> compare_aux Ordering.LT x y.
[] compare_aux _ (2_ _) 1 --> Ordering.GT.
[] compare_aux _ (2_ _) 2 --> Ordering.GT.
[] compare_aux _ (2_ _) 3 --> Ordering.GT.
[] compare_aux _ (2_ _) 4 --> Ordering.GT.
[] compare_aux _ (2_ _) 5 --> Ordering.GT.
[] compare_aux _ (2_ _) 6 --> Ordering.GT.
[] compare_aux _ (2_ _) 7 --> Ordering.GT.
[] compare_aux _ (2_ _) 8 --> Ordering.GT.
[] compare_aux _ (2_ _) 9 --> Ordering.GT.
[x, y] compare_aux _ (2_ x) (0_ y) --> compare_aux Ordering.GT x y.
[x, y] compare_aux _ (2_ x) (1_ y) --> compare_aux Ordering.GT x y.
[acc, x, y] compare_aux acc (2_ x) (2_ y) --> compare_aux acc x y.
[x, y] compare_aux _ (2_ x) (3_ y) --> compare_aux Ordering.LT x y.
[x, y] compare_aux _ (2_ x) (4_ y) --> compare_aux Ordering.LT x y.
[x, y] compare_aux _ (2_ x) (5_ y) --> compare_aux Ordering.LT x y.
[x, y] compare_aux _ (2_ x) (6_ y) --> compare_aux Ordering.LT x y.
[x, y] compare_aux _ (2_ x) (7_ y) --> compare_aux Ordering.LT x y.
[x, y] compare_aux _ (2_ x) (8_ y) --> compare_aux Ordering.LT x y.
[x, y] compare_aux _ (2_ x) (9_ y) --> compare_aux Ordering.LT x y.
[] compare_aux _ (3_ _) 1 --> Ordering.GT.
[] compare_aux _ (3_ _) 2 --> Ordering.GT.
[] compare_aux _ (3_ _) 3 --> Ordering.GT.
[] compare_aux _ (3_ _) 4 --> Ordering.GT.
[] compare_aux _ (3_ _) 5 --> Ordering.GT.
[] compare_aux _ (3_ _) 6 --> Ordering.GT.
[] compare_aux _ (3_ _) 7 --> Ordering.GT.
[] compare_aux _ (3_ _) 8 --> Ordering.GT.
[] compare_aux _ (3_ _) 9 --> Ordering.GT.
[x, y] compare_aux _ (3_ x) (0_ y) --> compare_aux Ordering.GT x y.
[x, y] compare_aux _ (3_ x) (1_ y) --> compare_aux Ordering.GT x y.
[x, y] compare_aux _ (3_ x) (2_ y) --> compare_aux Ordering.GT x y.
[acc, x, y] compare_aux acc (3_ x) (3_ y) --> compare_aux acc x y.
[x, y] compare_aux _ (3_ x) (4_ y) --> compare_aux Ordering.LT x y.
[x, y] compare_aux _ (3_ x) (5_ y) --> compare_aux Ordering.LT x y.
[x, y] compare_aux _ (3_ x) (6_ y) --> compare_aux Ordering.LT x y.
[x, y] compare_aux _ (3_ x) (7_ y) --> compare_aux Ordering.LT x y.
[x, y] compare_aux _ (3_ x) (8_ y) --> compare_aux Ordering.LT x y.
[x, y] compare_aux _ (3_ x) (9_ y) --> compare_aux Ordering.LT x y.
[] compare_aux _ (4_ _) 1 --> Ordering.GT.
[] compare_aux _ (4_ _) 2 --> Ordering.GT.
[] compare_aux _ (4_ _) 3 --> Ordering.GT.
[] compare_aux _ (4_ _) 4 --> Ordering.GT.
[] compare_aux _ (4_ _) 5 --> Ordering.GT.
[] compare_aux _ (4_ _) 6 --> Ordering.GT.
[] compare_aux _ (4_ _) 7 --> Ordering.GT.
[] compare_aux _ (4_ _) 8 --> Ordering.GT.
[] compare_aux _ (4_ _) 9 --> Ordering.GT.
[x, y] compare_aux _ (4_ x) (0_ y) --> compare_aux Ordering.GT x y.
[x, y] compare_aux _ (4_ x) (1_ y) --> compare_aux Ordering.GT x y.
[x, y] compare_aux _ (4_ x) (2_ y) --> compare_aux Ordering.GT x y.
[x, y] compare_aux _ (4_ x) (3_ y) --> compare_aux Ordering.GT x y.
[acc, x, y] compare_aux acc (4_ x) (4_ y) --> compare_aux acc x y.
[x, y] compare_aux _ (4_ x) (5_ y) --> compare_aux Ordering.LT x y.
[x, y] compare_aux _ (4_ x) (6_ y) --> compare_aux Ordering.LT x y.
[x, y] compare_aux _ (4_ x) (7_ y) --> compare_aux Ordering.LT x y.
[x, y] compare_aux _ (4_ x) (8_ y) --> compare_aux Ordering.LT x y.
[x, y] compare_aux _ (4_ x) (9_ y) --> compare_aux Ordering.LT x y.
[] compare_aux _ (5_ _) 1 --> Ordering.GT.
[] compare_aux _ (5_ _) 2 --> Ordering.GT.
[] compare_aux _ (5_ _) 3 --> Ordering.GT.
[] compare_aux _ (5_ _) 4 --> Ordering.GT.
[] compare_aux _ (5_ _) 5 --> Ordering.GT.
[] compare_aux _ (5_ _) 6 --> Ordering.GT.
[] compare_aux _ (5_ _) 7 --> Ordering.GT.
[] compare_aux _ (5_ _) 8 --> Ordering.GT.
[] compare_aux _ (5_ _) 9 --> Ordering.GT.
[x, y] compare_aux _ (5_ x) (0_ y) --> compare_aux Ordering.GT x y.
[x, y] compare_aux _ (5_ x) (1_ y) --> compare_aux Ordering.GT x y.
[x, y] compare_aux _ (5_ x) (2_ y) --> compare_aux Ordering.GT x y.
[x, y] compare_aux _ (5_ x) (3_ y) --> compare_aux Ordering.GT x y.
[x, y] compare_aux _ (5_ x) (4_ y) --> compare_aux Ordering.GT x y.
[acc, x, y] compare_aux acc (5_ x) (5_ y) --> compare_aux acc x y.
[x, y] compare_aux _ (5_ x) (6_ y) --> compare_aux Ordering.LT x y.
[x, y] compare_aux _ (5_ x) (7_ y) --> compare_aux Ordering.LT x y.
[x, y] compare_aux _ (5_ x) (8_ y) --> compare_aux Ordering.LT x y.
[x, y] compare_aux _ (5_ x) (9_ y) --> compare_aux Ordering.LT x y.
[] compare_aux _ (6_ _) 1 --> Ordering.GT.
[] compare_aux _ (6_ _) 2 --> Ordering.GT.
[] compare_aux _ (6_ _) 3 --> Ordering.GT.
[] compare_aux _ (6_ _) 4 --> Ordering.GT.
[] compare_aux _ (6_ _) 5 --> Ordering.GT.
[] compare_aux _ (6_ _) 6 --> Ordering.GT.
[] compare_aux _ (6_ _) 7 --> Ordering.GT.
[] compare_aux _ (6_ _) 8 --> Ordering.GT.
[] compare_aux _ (6_ _) 9 --> Ordering.GT.
[x, y] compare_aux _ (6_ x) (0_ y) --> compare_aux Ordering.GT x y.
[x, y] compare_aux _ (6_ x) (1_ y) --> compare_aux Ordering.GT x y.
[x, y] compare_aux _ (6_ x) (2_ y) --> compare_aux Ordering.GT x y.
[x, y] compare_aux _ (6_ x) (3_ y) --> compare_aux Ordering.GT x y.
[x, y] compare_aux _ (6_ x) (4_ y) --> compare_aux Ordering.GT x y.
[x, y] compare_aux _ (6_ x) (5_ y) --> compare_aux Ordering.GT x y.
[acc, x, y] compare_aux acc (6_ x) (6_ y) --> compare_aux acc x y.
[x, y] compare_aux _ (6_ x) (7_ y) --> compare_aux Ordering.LT x y.
[x, y] compare_aux _ (6_ x) (8_ y) --> compare_aux Ordering.LT x y.
[x, y] compare_aux _ (6_ x) (9_ y) --> compare_aux Ordering.LT x y.
[] compare_aux _ (7_ _) 1 --> Ordering.GT.
[] compare_aux _ (7_ _) 2 --> Ordering.GT.
[] compare_aux _ (7_ _) 3 --> Ordering.GT.
[] compare_aux _ (7_ _) 4 --> Ordering.GT.
[] compare_aux _ (7_ _) 5 --> Ordering.GT.
[] compare_aux _ (7_ _) 6 --> Ordering.GT.
[] compare_aux _ (7_ _) 7 --> Ordering.GT.
[] compare_aux _ (7_ _) 8 --> Ordering.GT.
[] compare_aux _ (7_ _) 9 --> Ordering.GT.
[x, y] compare_aux _ (7_ x) (0_ y) --> compare_aux Ordering.GT x y.
[x, y] compare_aux _ (7_ x) (1_ y) --> compare_aux Ordering.GT x y.
[x, y] compare_aux _ (7_ x) (2_ y) --> compare_aux Ordering.GT x y.
[x, y] compare_aux _ (7_ x) (3_ y) --> compare_aux Ordering.GT x y.
[x, y] compare_aux _ (7_ x) (4_ y) --> compare_aux Ordering.GT x y.
[x, y] compare_aux _ (7_ x) (5_ y) --> compare_aux Ordering.GT x y.
[x, y] compare_aux _ (7_ x) (6_ y) --> compare_aux Ordering.GT x y.
[acc, x, y] compare_aux acc (7_ x) (7_ y) --> compare_aux acc x y.
[x, y] compare_aux _ (7_ x) (8_ y) --> compare_aux Ordering.LT x y.
[x, y] compare_aux _ (7_ x) (9_ y) --> compare_aux Ordering.LT x y.
[] compare_aux _ (8_ _) 1 --> Ordering.GT.
[] compare_aux _ (8_ _) 2 --> Ordering.GT.
[] compare_aux _ (8_ _) 3 --> Ordering.GT.
[] compare_aux _ (8_ _) 4 --> Ordering.GT.
[] compare_aux _ (8_ _) 5 --> Ordering.GT.
[] compare_aux _ (8_ _) 6 --> Ordering.GT.
[] compare_aux _ (8_ _) 7 --> Ordering.GT.
[] compare_aux _ (8_ _) 8 --> Ordering.GT.
[] compare_aux _ (8_ _) 9 --> Ordering.GT.
[x, y] compare_aux _ (8_ x) (0_ y) --> compare_aux Ordering.GT x y.
[x, y] compare_aux _ (8_ x) (1_ y) --> compare_aux Ordering.GT x y.
[x, y] compare_aux _ (8_ x) (2_ y) --> compare_aux Ordering.GT x y.
[x, y] compare_aux _ (8_ x) (3_ y) --> compare_aux Ordering.GT x y.
[x, y] compare_aux _ (8_ x) (4_ y) --> compare_aux Ordering.GT x y.
[x, y] compare_aux _ (8_ x) (5_ y) --> compare_aux Ordering.GT x y.
[x, y] compare_aux _ (8_ x) (6_ y) --> compare_aux Ordering.GT x y.
[x, y] compare_aux _ (8_ x) (7_ y) --> compare_aux Ordering.GT x y.
[acc, x, y] compare_aux acc (8_ x) (8_ y) --> compare_aux acc x y.
[x, y] compare_aux _ (8_ x) (9_ y) --> compare_aux Ordering.LT x y.
[] compare_aux _ (9_ _) 1 --> Ordering.GT.
[] compare_aux _ (9_ _) 2 --> Ordering.GT.
[] compare_aux _ (9_ _) 3 --> Ordering.GT.
[] compare_aux _ (9_ _) 4 --> Ordering.GT.
[] compare_aux _ (9_ _) 5 --> Ordering.GT.
[] compare_aux _ (9_ _) 6 --> Ordering.GT.
[] compare_aux _ (9_ _) 7 --> Ordering.GT.
[] compare_aux _ (9_ _) 8 --> Ordering.GT.
[] compare_aux _ (9_ _) 9 --> Ordering.GT.
[x, y] compare_aux _ (9_ x) (0_ y) --> compare_aux Ordering.GT x y.
[x, y] compare_aux _ (9_ x) (1_ y) --> compare_aux Ordering.GT x y.
[x, y] compare_aux _ (9_ x) (2_ y) --> compare_aux Ordering.GT x y.
[x, y] compare_aux _ (9_ x) (3_ y) --> compare_aux Ordering.GT x y.
[x, y] compare_aux _ (9_ x) (4_ y) --> compare_aux Ordering.GT x y.
[x, y] compare_aux _ (9_ x) (5_ y) --> compare_aux Ordering.GT x y.
[x, y] compare_aux _ (9_ x) (6_ y) --> compare_aux Ordering.GT x y.
[x, y] compare_aux _ (9_ x) (7_ y) --> compare_aux Ordering.GT x y.
[x, y] compare_aux _ (9_ x) (8_ y) --> compare_aux Ordering.GT x y.
[acc, x, y] compare_aux acc (9_ x) (9_ y) --> compare_aux acc x y.

def compare : T -> T -> Ordering.T.
[x, y] compare x y --> compare_aux Ordering.EQ x y.

def Ord : Ord.T t := Ord.Cons t compare.
def Eq : Eq.T t := Ord.impliesEq t Ord.

def parse_aux : T -> String.T -> T.
[acc] parse_aux acc (List.nil _) --> acc.
[acc, tl] parse_aux acc (List.cons _ Char.0 tl) --> parse_aux (0_ acc) tl.
[acc, tl] parse_aux acc (List.cons _ Char.1 tl) --> parse_aux (1_ acc) tl.
[acc, tl] parse_aux acc (List.cons _ Char.2 tl) --> parse_aux (2_ acc) tl.
[acc, tl] parse_aux acc (List.cons _ Char.3 tl) --> parse_aux (3_ acc) tl.
[acc, tl] parse_aux acc (List.cons _ Char.4 tl) --> parse_aux (4_ acc) tl.
[acc, tl] parse_aux acc (List.cons _ Char.5 tl) --> parse_aux (5_ acc) tl.
[acc, tl] parse_aux acc (List.cons _ Char.6 tl) --> parse_aux (6_ acc) tl.
[acc, tl] parse_aux acc (List.cons _ Char.7 tl) --> parse_aux (7_ acc) tl.
[acc, tl] parse_aux acc (List.cons _ Char.8 tl) --> parse_aux (8_ acc) tl.
[acc, tl] parse_aux acc (List.cons _ Char.9 tl) --> parse_aux (9_ acc) tl.

def parse : String.T -> T.
[tl] parse (List.cons _ Char.1 tl) --> parse_aux 1 tl.
[tl] parse (List.cons _ Char.2 tl) --> parse_aux 2 tl.
[tl] parse (List.cons _ Char.3 tl) --> parse_aux 3 tl.
[tl] parse (List.cons _ Char.4 tl) --> parse_aux 4 tl.
[tl] parse (List.cons _ Char.5 tl) --> parse_aux 5 tl.
[tl] parse (List.cons _ Char.6 tl) --> parse_aux 6 tl.
[tl] parse (List.cons _ Char.7 tl) --> parse_aux 7 tl.
[tl] parse (List.cons _ Char.8 tl) --> parse_aux 8 tl.
[tl] parse (List.cons _ Char.9 tl) --> parse_aux 9 tl.

def print_aux : String.T -> T -> String.T.
[acc] print_aux acc 1 --> String.cons Char.1 acc.
[acc] print_aux acc 2 --> String.cons Char.2 acc.
[acc] print_aux acc 3 --> String.cons Char.3 acc.
[acc] print_aux acc 4 --> String.cons Char.4 acc.
[acc] print_aux acc 5 --> String.cons Char.5 acc.
[acc] print_aux acc 6 --> String.cons Char.6 acc.
[acc] print_aux acc 7 --> String.cons Char.7 acc.
[acc] print_aux acc 8 --> String.cons Char.8 acc.
[acc] print_aux acc 9 --> String.cons Char.9 acc.
[acc, tl] print_aux acc (0_ tl) --> print_aux (String.cons Char.0 acc) tl.
[acc, tl] print_aux acc (1_ tl) --> print_aux (String.cons Char.1 acc) tl.
[acc, tl] print_aux acc (2_ tl) --> print_aux (String.cons Char.2 acc) tl.
[acc, tl] print_aux acc (3_ tl) --> print_aux (String.cons Char.3 acc) tl.
[acc, tl] print_aux acc (4_ tl) --> print_aux (String.cons Char.4 acc) tl.
[acc, tl] print_aux acc (5_ tl) --> print_aux (String.cons Char.5 acc) tl.
[acc, tl] print_aux acc (6_ tl) --> print_aux (String.cons Char.6 acc) tl.
[acc, tl] print_aux acc (7_ tl) --> print_aux (String.cons Char.7 acc) tl.
[acc, tl] print_aux acc (8_ tl) --> print_aux (String.cons Char.8 acc) tl.
[acc, tl] print_aux acc (9_ tl) --> print_aux (String.cons Char.9 acc) tl.

def print : T -> String.T.
[x] print x --> print_aux String.end x.

def succ : T -> T.
[] succ 1 --> 2.
[] succ 2 --> 3.
[] succ 3 --> 4.
[] succ 4 --> 5.
[] succ 5 --> 6.
[] succ 6 --> 7.
[] succ 7 --> 8.
[] succ 8 --> 9.
[] succ 9 --> 0_ 1.
[x] succ (0_ x) --> 1_ x.
[x] succ (1_ x) --> 2_ x.
[x] succ (2_ x) --> 3_ x.
[x] succ (3_ x) --> 4_ x.
[x] succ (4_ x) --> 5_ x.
[x] succ (5_ x) --> 6_ x.
[x] succ (6_ x) --> 7_ x.
[x] succ (7_ x) --> 8_ x.
[x] succ (8_ x) --> 9_ x.
[x] succ (9_ x) --> 0_ (succ x).

def add_aux : Bit.T -> T -> T -> T.
[] add_aux Bit.0 1 1 --> 2.
[] add_aux Bit.1 1 1 --> 3.
[] add_aux Bit.0 1 2 --> 3.
[] add_aux Bit.1 1 2 --> 4.
[] add_aux Bit.0 1 3 --> 4.
[] add_aux Bit.1 1 3 --> 5.
[] add_aux Bit.0 1 4 --> 5.
[] add_aux Bit.1 1 4 --> 6.
[] add_aux Bit.0 1 5 --> 6.
[] add_aux Bit.1 1 5 --> 7.
[] add_aux Bit.0 1 6 --> 7.
[] add_aux Bit.1 1 6 --> 8.
[] add_aux Bit.0 1 7 --> 8.
[] add_aux Bit.1 1 7 --> 9.
[] add_aux Bit.0 1 8 --> 9.
[] add_aux Bit.1 1 8 --> 0_ 1.
[] add_aux Bit.0 1 9 --> 0_ 1.
[] add_aux Bit.1 1 9 --> 1_ 1.
[y] add_aux Bit.0 1 (0_ y) --> 1_ y.
[y] add_aux Bit.1 1 (0_ y) --> 2_ y.
[y] add_aux Bit.0 1 (1_ y) --> 2_ y.
[y] add_aux Bit.1 1 (1_ y) --> 3_ y.
[y] add_aux Bit.0 1 (2_ y) --> 3_ y.
[y] add_aux Bit.1 1 (2_ y) --> 4_ y.
[y] add_aux Bit.0 1 (3_ y) --> 4_ y.
[y] add_aux Bit.1 1 (3_ y) --> 5_ y.
[y] add_aux Bit.0 1 (4_ y) --> 5_ y.
[y] add_aux Bit.1 1 (4_ y) --> 6_ y.
[y] add_aux Bit.0 1 (5_ y) --> 6_ y.
[y] add_aux Bit.1 1 (5_ y) --> 7_ y.
[y] add_aux Bit.0 1 (6_ y) --> 7_ y.
[y] add_aux Bit.1 1 (6_ y) --> 8_ y.
[y] add_aux Bit.0 1 (7_ y) --> 8_ y.
[y] add_aux Bit.1 1 (7_ y) --> 9_ y.
[y] add_aux Bit.0 1 (8_ y) --> 9_ y.
[y] add_aux Bit.1 1 (8_ y) --> 0_ (succ y).
[y] add_aux Bit.0 1 (9_ y) --> 0_ (succ y).
[y] add_aux Bit.1 1 (9_ y) --> 1_ (succ y).
[] add_aux Bit.0 2 1 --> 3.
[] add_aux Bit.1 2 1 --> 4.
[] add_aux Bit.0 2 2 --> 4.
[] add_aux Bit.1 2 2 --> 5.
[] add_aux Bit.0 2 3 --> 5.
[] add_aux Bit.1 2 3 --> 6.
[] add_aux Bit.0 2 4 --> 6.
[] add_aux Bit.1 2 4 --> 7.
[] add_aux Bit.0 2 5 --> 7.
[] add_aux Bit.1 2 5 --> 8.
[] add_aux Bit.0 2 6 --> 8.
[] add_aux Bit.1 2 6 --> 9.
[] add_aux Bit.0 2 7 --> 9.
[] add_aux Bit.1 2 7 --> 0_ 1.
[] add_aux Bit.0 2 8 --> 0_ 1.
[] add_aux Bit.1 2 8 --> 1_ 1.
[] add_aux Bit.0 2 9 --> 1_ 1.
[] add_aux Bit.1 2 9 --> 2_ 1.
[y] add_aux Bit.0 2 (0_ y) --> 2_ y.
[y] add_aux Bit.1 2 (0_ y) --> 3_ y.
[y] add_aux Bit.0 2 (1_ y) --> 3_ y.
[y] add_aux Bit.1 2 (1_ y) --> 4_ y.
[y] add_aux Bit.0 2 (2_ y) --> 4_ y.
[y] add_aux Bit.1 2 (2_ y) --> 5_ y.
[y] add_aux Bit.0 2 (3_ y) --> 5_ y.
[y] add_aux Bit.1 2 (3_ y) --> 6_ y.
[y] add_aux Bit.0 2 (4_ y) --> 6_ y.
[y] add_aux Bit.1 2 (4_ y) --> 7_ y.
[y] add_aux Bit.0 2 (5_ y) --> 7_ y.
[y] add_aux Bit.1 2 (5_ y) --> 8_ y.
[y] add_aux Bit.0 2 (6_ y) --> 8_ y.
[y] add_aux Bit.1 2 (6_ y) --> 9_ y.
[y] add_aux Bit.0 2 (7_ y) --> 9_ y.
[y] add_aux Bit.1 2 (7_ y) --> 0_ (succ y).
[y] add_aux Bit.0 2 (8_ y) --> 0_ (succ y).
[y] add_aux Bit.1 2 (8_ y) --> 1_ (succ y).
[y] add_aux Bit.0 2 (9_ y) --> 1_ (succ y).
[y] add_aux Bit.1 2 (9_ y) --> 2_ (succ y).
[] add_aux Bit.0 3 1 --> 4.
[] add_aux Bit.1 3 1 --> 5.
[] add_aux Bit.0 3 2 --> 5.
[] add_aux Bit.1 3 2 --> 6.
[] add_aux Bit.0 3 3 --> 6.
[] add_aux Bit.1 3 3 --> 7.
[] add_aux Bit.0 3 4 --> 7.
[] add_aux Bit.1 3 4 --> 8.
[] add_aux Bit.0 3 5 --> 8.
[] add_aux Bit.1 3 5 --> 9.
[] add_aux Bit.0 3 6 --> 9.
[] add_aux Bit.1 3 6 --> 0_ 1.
[] add_aux Bit.0 3 7 --> 0_ 1.
[] add_aux Bit.1 3 7 --> 1_ 1.
[] add_aux Bit.0 3 8 --> 1_ 1.
[] add_aux Bit.1 3 8 --> 2_ 1.
[] add_aux Bit.0 3 9 --> 2_ 1.
[] add_aux Bit.1 3 9 --> 3_ 1.
[y] add_aux Bit.0 3 (0_ y) --> 3_ y.
[y] add_aux Bit.1 3 (0_ y) --> 4_ y.
[y] add_aux Bit.0 3 (1_ y) --> 4_ y.
[y] add_aux Bit.1 3 (1_ y) --> 5_ y.
[y] add_aux Bit.0 3 (2_ y) --> 5_ y.
[y] add_aux Bit.1 3 (2_ y) --> 6_ y.
[y] add_aux Bit.0 3 (3_ y) --> 6_ y.
[y] add_aux Bit.1 3 (3_ y) --> 7_ y.
[y] add_aux Bit.0 3 (4_ y) --> 7_ y.
[y] add_aux Bit.1 3 (4_ y) --> 8_ y.
[y] add_aux Bit.0 3 (5_ y) --> 8_ y.
[y] add_aux Bit.1 3 (5_ y) --> 9_ y.
[y] add_aux Bit.0 3 (6_ y) --> 9_ y.
[y] add_aux Bit.1 3 (6_ y) --> 0_ (succ y).
[y] add_aux Bit.0 3 (7_ y) --> 0_ (succ y).
[y] add_aux Bit.1 3 (7_ y) --> 1_ (succ y).
[y] add_aux Bit.0 3 (8_ y) --> 1_ (succ y).
[y] add_aux Bit.1 3 (8_ y) --> 2_ (succ y).
[y] add_aux Bit.0 3 (9_ y) --> 2_ (succ y).
[y] add_aux Bit.1 3 (9_ y) --> 3_ (succ y).
[] add_aux Bit.0 4 1 --> 5.
[] add_aux Bit.1 4 1 --> 6.
[] add_aux Bit.0 4 2 --> 6.
[] add_aux Bit.1 4 2 --> 7.
[] add_aux Bit.0 4 3 --> 7.
[] add_aux Bit.1 4 3 --> 8.
[] add_aux Bit.0 4 4 --> 8.
[] add_aux Bit.1 4 4 --> 9.
[] add_aux Bit.0 4 5 --> 9.
[] add_aux Bit.1 4 5 --> 0_ 1.
[] add_aux Bit.0 4 6 --> 0_ 1.
[] add_aux Bit.1 4 6 --> 1_ 1.
[] add_aux Bit.0 4 7 --> 1_ 1.
[] add_aux Bit.1 4 7 --> 2_ 1.
[] add_aux Bit.0 4 8 --> 2_ 1.
[] add_aux Bit.1 4 8 --> 3_ 1.
[] add_aux Bit.0 4 9 --> 3_ 1.
[] add_aux Bit.1 4 9 --> 4_ 1.
[y] add_aux Bit.0 4 (0_ y) --> 4_ y.
[y] add_aux Bit.1 4 (0_ y) --> 5_ y.
[y] add_aux Bit.0 4 (1_ y) --> 5_ y.
[y] add_aux Bit.1 4 (1_ y) --> 6_ y.
[y] add_aux Bit.0 4 (2_ y) --> 6_ y.
[y] add_aux Bit.1 4 (2_ y) --> 7_ y.
[y] add_aux Bit.0 4 (3_ y) --> 7_ y.
[y] add_aux Bit.1 4 (3_ y) --> 8_ y.
[y] add_aux Bit.0 4 (4_ y) --> 8_ y.
[y] add_aux Bit.1 4 (4_ y) --> 9_ y.
[y] add_aux Bit.0 4 (5_ y) --> 9_ y.
[y] add_aux Bit.1 4 (5_ y) --> 0_ (succ y).
[y] add_aux Bit.0 4 (6_ y) --> 0_ (succ y).
[y] add_aux Bit.1 4 (6_ y) --> 1_ (succ y).
[y] add_aux Bit.0 4 (7_ y) --> 1_ (succ y).
[y] add_aux Bit.1 4 (7_ y) --> 2_ (succ y).
[y] add_aux Bit.0 4 (8_ y) --> 2_ (succ y).
[y] add_aux Bit.1 4 (8_ y) --> 3_ (succ y).
[y] add_aux Bit.0 4 (9_ y) --> 3_ (succ y).
[y] add_aux Bit.1 4 (9_ y) --> 4_ (succ y).
[] add_aux Bit.0 5 1 --> 6.
[] add_aux Bit.1 5 1 --> 7.
[] add_aux Bit.0 5 2 --> 7.
[] add_aux Bit.1 5 2 --> 8.
[] add_aux Bit.0 5 3 --> 8.
[] add_aux Bit.1 5 3 --> 9.
[] add_aux Bit.0 5 4 --> 9.
[] add_aux Bit.1 5 4 --> 0_ 1.
[] add_aux Bit.0 5 5 --> 0_ 1.
[] add_aux Bit.1 5 5 --> 1_ 1.
[] add_aux Bit.0 5 6 --> 1_ 1.
[] add_aux Bit.1 5 6 --> 2_ 1.
[] add_aux Bit.0 5 7 --> 2_ 1.
[] add_aux Bit.1 5 7 --> 3_ 1.
[] add_aux Bit.0 5 8 --> 3_ 1.
[] add_aux Bit.1 5 8 --> 4_ 1.
[] add_aux Bit.0 5 9 --> 4_ 1.
[] add_aux Bit.1 5 9 --> 5_ 1.
[y] add_aux Bit.0 5 (0_ y) --> 5_ y.
[y] add_aux Bit.1 5 (0_ y) --> 6_ y.
[y] add_aux Bit.0 5 (1_ y) --> 6_ y.
[y] add_aux Bit.1 5 (1_ y) --> 7_ y.
[y] add_aux Bit.0 5 (2_ y) --> 7_ y.
[y] add_aux Bit.1 5 (2_ y) --> 8_ y.
[y] add_aux Bit.0 5 (3_ y) --> 8_ y.
[y] add_aux Bit.1 5 (3_ y) --> 9_ y.
[y] add_aux Bit.0 5 (4_ y) --> 9_ y.
[y] add_aux Bit.1 5 (4_ y) --> 0_ (succ y).
[y] add_aux Bit.0 5 (5_ y) --> 0_ (succ y).
[y] add_aux Bit.1 5 (5_ y) --> 1_ (succ y).
[y] add_aux Bit.0 5 (6_ y) --> 1_ (succ y).
[y] add_aux Bit.1 5 (6_ y) --> 2_ (succ y).
[y] add_aux Bit.0 5 (7_ y) --> 2_ (succ y).
[y] add_aux Bit.1 5 (7_ y) --> 3_ (succ y).
[y] add_aux Bit.0 5 (8_ y) --> 3_ (succ y).
[y] add_aux Bit.1 5 (8_ y) --> 4_ (succ y).
[y] add_aux Bit.0 5 (9_ y) --> 4_ (succ y).
[y] add_aux Bit.1 5 (9_ y) --> 5_ (succ y).
[] add_aux Bit.0 6 1 --> 7.
[] add_aux Bit.1 6 1 --> 8.
[] add_aux Bit.0 6 2 --> 8.
[] add_aux Bit.1 6 2 --> 9.
[] add_aux Bit.0 6 3 --> 9.
[] add_aux Bit.1 6 3 --> 0_ 1.
[] add_aux Bit.0 6 4 --> 0_ 1.
[] add_aux Bit.1 6 4 --> 1_ 1.
[] add_aux Bit.0 6 5 --> 1_ 1.
[] add_aux Bit.1 6 5 --> 2_ 1.
[] add_aux Bit.0 6 6 --> 2_ 1.
[] add_aux Bit.1 6 6 --> 3_ 1.
[] add_aux Bit.0 6 7 --> 3_ 1.
[] add_aux Bit.1 6 7 --> 4_ 1.
[] add_aux Bit.0 6 8 --> 4_ 1.
[] add_aux Bit.1 6 8 --> 5_ 1.
[] add_aux Bit.0 6 9 --> 5_ 1.
[] add_aux Bit.1 6 9 --> 6_ 1.
[y] add_aux Bit.0 6 (0_ y) --> 6_ y.
[y] add_aux Bit.1 6 (0_ y) --> 7_ y.
[y] add_aux Bit.0 6 (1_ y) --> 7_ y.
[y] add_aux Bit.1 6 (1_ y) --> 8_ y.
[y] add_aux Bit.0 6 (2_ y) --> 8_ y.
[y] add_aux Bit.1 6 (2_ y) --> 9_ y.
[y] add_aux Bit.0 6 (3_ y) --> 9_ y.
[y] add_aux Bit.1 6 (3_ y) --> 0_ (succ y).
[y] add_aux Bit.0 6 (4_ y) --> 0_ (succ y).
[y] add_aux Bit.1 6 (4_ y) --> 1_ (succ y).
[y] add_aux Bit.0 6 (5_ y) --> 1_ (succ y).
[y] add_aux Bit.1 6 (5_ y) --> 2_ (succ y).
[y] add_aux Bit.0 6 (6_ y) --> 2_ (succ y).
[y] add_aux Bit.1 6 (6_ y) --> 3_ (succ y).
[y] add_aux Bit.0 6 (7_ y) --> 3_ (succ y).
[y] add_aux Bit.1 6 (7_ y) --> 4_ (succ y).
[y] add_aux Bit.0 6 (8_ y) --> 4_ (succ y).
[y] add_aux Bit.1 6 (8_ y) --> 5_ (succ y).
[y] add_aux Bit.0 6 (9_ y) --> 5_ (succ y).
[y] add_aux Bit.1 6 (9_ y) --> 6_ (succ y).
[] add_aux Bit.0 7 1 --> 8.
[] add_aux Bit.1 7 1 --> 9.
[] add_aux Bit.0 7 2 --> 9.
[] add_aux Bit.1 7 2 --> 0_ 1.
[] add_aux Bit.0 7 3 --> 0_ 1.
[] add_aux Bit.1 7 3 --> 1_ 1.
[] add_aux Bit.0 7 4 --> 1_ 1.
[] add_aux Bit.1 7 4 --> 2_ 1.
[] add_aux Bit.0 7 5 --> 2_ 1.
[] add_aux Bit.1 7 5 --> 3_ 1.
[] add_aux Bit.0 7 6 --> 3_ 1.
[] add_aux Bit.1 7 6 --> 4_ 1.
[] add_aux Bit.0 7 7 --> 4_ 1.
[] add_aux Bit.1 7 7 --> 5_ 1.
[] add_aux Bit.0 7 8 --> 5_ 1.
[] add_aux Bit.1 7 8 --> 6_ 1.
[] add_aux Bit.0 7 9 --> 6_ 1.
[] add_aux Bit.1 7 9 --> 7_ 1.
[y] add_aux Bit.0 7 (0_ y) --> 7_ y.
[y] add_aux Bit.1 7 (0_ y) --> 8_ y.
[y] add_aux Bit.0 7 (1_ y) --> 8_ y.
[y] add_aux Bit.1 7 (1_ y) --> 9_ y.
[y] add_aux Bit.0 7 (2_ y) --> 9_ y.
[y] add_aux Bit.1 7 (2_ y) --> 0_ (succ y).
[y] add_aux Bit.0 7 (3_ y) --> 0_ (succ y).
[y] add_aux Bit.1 7 (3_ y) --> 1_ (succ y).
[y] add_aux Bit.0 7 (4_ y) --> 1_ (succ y).
[y] add_aux Bit.1 7 (4_ y) --> 2_ (succ y).
[y] add_aux Bit.0 7 (5_ y) --> 2_ (succ y).
[y] add_aux Bit.1 7 (5_ y) --> 3_ (succ y).
[y] add_aux Bit.0 7 (6_ y) --> 3_ (succ y).
[y] add_aux Bit.1 7 (6_ y) --> 4_ (succ y).
[y] add_aux Bit.0 7 (7_ y) --> 4_ (succ y).
[y] add_aux Bit.1 7 (7_ y) --> 5_ (succ y).
[y] add_aux Bit.0 7 (8_ y) --> 5_ (succ y).
[y] add_aux Bit.1 7 (8_ y) --> 6_ (succ y).
[y] add_aux Bit.0 7 (9_ y) --> 6_ (succ y).
[y] add_aux Bit.1 7 (9_ y) --> 7_ (succ y).
[] add_aux Bit.0 8 1 --> 9.
[] add_aux Bit.1 8 1 --> 0_ 1.
[] add_aux Bit.0 8 2 --> 0_ 1.
[] add_aux Bit.1 8 2 --> 1_ 1.
[] add_aux Bit.0 8 3 --> 1_ 1.
[] add_aux Bit.1 8 3 --> 2_ 1.
[] add_aux Bit.0 8 4 --> 2_ 1.
[] add_aux Bit.1 8 4 --> 3_ 1.
[] add_aux Bit.0 8 5 --> 3_ 1.
[] add_aux Bit.1 8 5 --> 4_ 1.
[] add_aux Bit.0 8 6 --> 4_ 1.
[] add_aux Bit.1 8 6 --> 5_ 1.
[] add_aux Bit.0 8 7 --> 5_ 1.
[] add_aux Bit.1 8 7 --> 6_ 1.
[] add_aux Bit.0 8 8 --> 6_ 1.
[] add_aux Bit.1 8 8 --> 7_ 1.
[] add_aux Bit.0 8 9 --> 7_ 1.
[] add_aux Bit.1 8 9 --> 8_ 1.
[y] add_aux Bit.0 8 (0_ y) --> 8_ y.
[y] add_aux Bit.1 8 (0_ y) --> 9_ y.
[y] add_aux Bit.0 8 (1_ y) --> 9_ y.
[y] add_aux Bit.1 8 (1_ y) --> 0_ (succ y).
[y] add_aux Bit.0 8 (2_ y) --> 0_ (succ y).
[y] add_aux Bit.1 8 (2_ y) --> 1_ (succ y).
[y] add_aux Bit.0 8 (3_ y) --> 1_ (succ y).
[y] add_aux Bit.1 8 (3_ y) --> 2_ (succ y).
[y] add_aux Bit.0 8 (4_ y) --> 2_ (succ y).
[y] add_aux Bit.1 8 (4_ y) --> 3_ (succ y).
[y] add_aux Bit.0 8 (5_ y) --> 3_ (succ y).
[y] add_aux Bit.1 8 (5_ y) --> 4_ (succ y).
[y] add_aux Bit.0 8 (6_ y) --> 4_ (succ y).
[y] add_aux Bit.1 8 (6_ y) --> 5_ (succ y).
[y] add_aux Bit.0 8 (7_ y) --> 5_ (succ y).
[y] add_aux Bit.1 8 (7_ y) --> 6_ (succ y).
[y] add_aux Bit.0 8 (8_ y) --> 6_ (succ y).
[y] add_aux Bit.1 8 (8_ y) --> 7_ (succ y).
[y] add_aux Bit.0 8 (9_ y) --> 7_ (succ y).
[y] add_aux Bit.1 8 (9_ y) --> 8_ (succ y).
[] add_aux Bit.0 9 1 --> 0_ 1.
[] add_aux Bit.1 9 1 --> 1_ 1.
[] add_aux Bit.0 9 2 --> 1_ 1.
[] add_aux Bit.1 9 2 --> 2_ 1.
[] add_aux Bit.0 9 3 --> 2_ 1.
[] add_aux Bit.1 9 3 --> 3_ 1.
[] add_aux Bit.0 9 4 --> 3_ 1.
[] add_aux Bit.1 9 4 --> 4_ 1.
[] add_aux Bit.0 9 5 --> 4_ 1.
[] add_aux Bit.1 9 5 --> 5_ 1.
[] add_aux Bit.0 9 6 --> 5_ 1.
[] add_aux Bit.1 9 6 --> 6_ 1.
[] add_aux Bit.0 9 7 --> 6_ 1.
[] add_aux Bit.1 9 7 --> 7_ 1.
[] add_aux Bit.0 9 8 --> 7_ 1.
[] add_aux Bit.1 9 8 --> 8_ 1.
[] add_aux Bit.0 9 9 --> 8_ 1.
[] add_aux Bit.1 9 9 --> 9_ 1.
[y] add_aux Bit.0 9 (0_ y) --> 9_ y.
[y] add_aux Bit.1 9 (0_ y) --> 0_ (succ y).
[y] add_aux Bit.0 9 (1_ y) --> 0_ (succ y).
[y] add_aux Bit.1 9 (1_ y) --> 1_ (succ y).
[y] add_aux Bit.0 9 (2_ y) --> 1_ (succ y).
[y] add_aux Bit.1 9 (2_ y) --> 2_ (succ y).
[y] add_aux Bit.0 9 (3_ y) --> 2_ (succ y).
[y] add_aux Bit.1 9 (3_ y) --> 3_ (succ y).
[y] add_aux Bit.0 9 (4_ y) --> 3_ (succ y).
[y] add_aux Bit.1 9 (4_ y) --> 4_ (succ y).
[y] add_aux Bit.0 9 (5_ y) --> 4_ (succ y).
[y] add_aux Bit.1 9 (5_ y) --> 5_ (succ y).
[y] add_aux Bit.0 9 (6_ y) --> 5_ (succ y).
[y] add_aux Bit.1 9 (6_ y) --> 6_ (succ y).
[y] add_aux Bit.0 9 (7_ y) --> 6_ (succ y).
[y] add_aux Bit.1 9 (7_ y) --> 7_ (succ y).
[y] add_aux Bit.0 9 (8_ y) --> 7_ (succ y).
[y] add_aux Bit.1 9 (8_ y) --> 8_ (succ y).
[y] add_aux Bit.0 9 (9_ y) --> 8_ (succ y).
[y] add_aux Bit.1 9 (9_ y) --> 9_ (succ y).
[x] add_aux Bit.0 (0_ x) 1 --> 1_ x.
[x] add_aux Bit.1 (0_ x) 1 --> 2_ x.
[x] add_aux Bit.0 (0_ x) 2 --> 2_ x.
[x] add_aux Bit.1 (0_ x) 2 --> 3_ x.
[x] add_aux Bit.0 (0_ x) 3 --> 3_ x.
[x] add_aux Bit.1 (0_ x) 3 --> 4_ x.
[x] add_aux Bit.0 (0_ x) 4 --> 4_ x.
[x] add_aux Bit.1 (0_ x) 4 --> 5_ x.
[x] add_aux Bit.0 (0_ x) 5 --> 5_ x.
[x] add_aux Bit.1 (0_ x) 5 --> 6_ x.
[x] add_aux Bit.0 (0_ x) 6 --> 6_ x.
[x] add_aux Bit.1 (0_ x) 6 --> 7_ x.
[x] add_aux Bit.0 (0_ x) 7 --> 7_ x.
[x] add_aux Bit.1 (0_ x) 7 --> 8_ x.
[x] add_aux Bit.0 (0_ x) 8 --> 8_ x.
[x] add_aux Bit.1 (0_ x) 8 --> 9_ x.
[x] add_aux Bit.0 (0_ x) 9 --> 9_ x.
[x] add_aux Bit.1 (0_ x) 9 --> 0_ (succ x).
[x, y] add_aux Bit.0 (0_ x) (0_ y) --> 0_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (0_ x) (0_ y) --> 1_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.0 (0_ x) (1_ y) --> 1_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (0_ x) (1_ y) --> 2_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.0 (0_ x) (2_ y) --> 2_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (0_ x) (2_ y) --> 3_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.0 (0_ x) (3_ y) --> 3_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (0_ x) (3_ y) --> 4_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.0 (0_ x) (4_ y) --> 4_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (0_ x) (4_ y) --> 5_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.0 (0_ x) (5_ y) --> 5_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (0_ x) (5_ y) --> 6_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.0 (0_ x) (6_ y) --> 6_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (0_ x) (6_ y) --> 7_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.0 (0_ x) (7_ y) --> 7_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (0_ x) (7_ y) --> 8_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.0 (0_ x) (8_ y) --> 8_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (0_ x) (8_ y) --> 9_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.0 (0_ x) (9_ y) --> 9_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (0_ x) (9_ y) --> 0_ (add_aux Bit.1 x y).
[x] add_aux Bit.0 (1_ x) 1 --> 2_ x.
[x] add_aux Bit.1 (1_ x) 1 --> 3_ x.
[x] add_aux Bit.0 (1_ x) 2 --> 3_ x.
[x] add_aux Bit.1 (1_ x) 2 --> 4_ x.
[x] add_aux Bit.0 (1_ x) 3 --> 4_ x.
[x] add_aux Bit.1 (1_ x) 3 --> 5_ x.
[x] add_aux Bit.0 (1_ x) 4 --> 5_ x.
[x] add_aux Bit.1 (1_ x) 4 --> 6_ x.
[x] add_aux Bit.0 (1_ x) 5 --> 6_ x.
[x] add_aux Bit.1 (1_ x) 5 --> 7_ x.
[x] add_aux Bit.0 (1_ x) 6 --> 7_ x.
[x] add_aux Bit.1 (1_ x) 6 --> 8_ x.
[x] add_aux Bit.0 (1_ x) 7 --> 8_ x.
[x] add_aux Bit.1 (1_ x) 7 --> 9_ x.
[x] add_aux Bit.0 (1_ x) 8 --> 9_ x.
[x] add_aux Bit.1 (1_ x) 8 --> 0_ (succ x).
[x] add_aux Bit.0 (1_ x) 9 --> 0_ (succ x).
[x] add_aux Bit.1 (1_ x) 9 --> 1_ (succ x).
[x, y] add_aux Bit.0 (1_ x) (0_ y) --> 1_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (1_ x) (0_ y) --> 2_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.0 (1_ x) (1_ y) --> 2_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (1_ x) (1_ y) --> 3_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.0 (1_ x) (2_ y) --> 3_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (1_ x) (2_ y) --> 4_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.0 (1_ x) (3_ y) --> 4_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (1_ x) (3_ y) --> 5_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.0 (1_ x) (4_ y) --> 5_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (1_ x) (4_ y) --> 6_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.0 (1_ x) (5_ y) --> 6_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (1_ x) (5_ y) --> 7_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.0 (1_ x) (6_ y) --> 7_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (1_ x) (6_ y) --> 8_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.0 (1_ x) (7_ y) --> 8_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (1_ x) (7_ y) --> 9_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.0 (1_ x) (8_ y) --> 9_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (1_ x) (8_ y) --> 0_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.0 (1_ x) (9_ y) --> 0_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.1 (1_ x) (9_ y) --> 1_ (add_aux Bit.1 x y).
[x] add_aux Bit.0 (2_ x) 1 --> 3_ x.
[x] add_aux Bit.1 (2_ x) 1 --> 4_ x.
[x] add_aux Bit.0 (2_ x) 2 --> 4_ x.
[x] add_aux Bit.1 (2_ x) 2 --> 5_ x.
[x] add_aux Bit.0 (2_ x) 3 --> 5_ x.
[x] add_aux Bit.1 (2_ x) 3 --> 6_ x.
[x] add_aux Bit.0 (2_ x) 4 --> 6_ x.
[x] add_aux Bit.1 (2_ x) 4 --> 7_ x.
[x] add_aux Bit.0 (2_ x) 5 --> 7_ x.
[x] add_aux Bit.1 (2_ x) 5 --> 8_ x.
[x] add_aux Bit.0 (2_ x) 6 --> 8_ x.
[x] add_aux Bit.1 (2_ x) 6 --> 9_ x.
[x] add_aux Bit.0 (2_ x) 7 --> 9_ x.
[x] add_aux Bit.1 (2_ x) 7 --> 0_ (succ x).
[x] add_aux Bit.0 (2_ x) 8 --> 0_ (succ x).
[x] add_aux Bit.1 (2_ x) 8 --> 1_ (succ x).
[x] add_aux Bit.0 (2_ x) 9 --> 1_ (succ x).
[x] add_aux Bit.1 (2_ x) 9 --> 2_ (succ x).
[x, y] add_aux Bit.0 (2_ x) (0_ y) --> 2_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (2_ x) (0_ y) --> 3_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.0 (2_ x) (1_ y) --> 3_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (2_ x) (1_ y) --> 4_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.0 (2_ x) (2_ y) --> 4_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (2_ x) (2_ y) --> 5_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.0 (2_ x) (3_ y) --> 5_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (2_ x) (3_ y) --> 6_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.0 (2_ x) (4_ y) --> 6_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (2_ x) (4_ y) --> 7_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.0 (2_ x) (5_ y) --> 7_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (2_ x) (5_ y) --> 8_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.0 (2_ x) (6_ y) --> 8_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (2_ x) (6_ y) --> 9_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.0 (2_ x) (7_ y) --> 9_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (2_ x) (7_ y) --> 0_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.0 (2_ x) (8_ y) --> 0_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.1 (2_ x) (8_ y) --> 1_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.0 (2_ x) (9_ y) --> 1_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.1 (2_ x) (9_ y) --> 2_ (add_aux Bit.1 x y).
[x] add_aux Bit.0 (3_ x) 1 --> 4_ x.
[x] add_aux Bit.1 (3_ x) 1 --> 5_ x.
[x] add_aux Bit.0 (3_ x) 2 --> 5_ x.
[x] add_aux Bit.1 (3_ x) 2 --> 6_ x.
[x] add_aux Bit.0 (3_ x) 3 --> 6_ x.
[x] add_aux Bit.1 (3_ x) 3 --> 7_ x.
[x] add_aux Bit.0 (3_ x) 4 --> 7_ x.
[x] add_aux Bit.1 (3_ x) 4 --> 8_ x.
[x] add_aux Bit.0 (3_ x) 5 --> 8_ x.
[x] add_aux Bit.1 (3_ x) 5 --> 9_ x.
[x] add_aux Bit.0 (3_ x) 6 --> 9_ x.
[x] add_aux Bit.1 (3_ x) 6 --> 0_ (succ x).
[x] add_aux Bit.0 (3_ x) 7 --> 0_ (succ x).
[x] add_aux Bit.1 (3_ x) 7 --> 1_ (succ x).
[x] add_aux Bit.0 (3_ x) 8 --> 1_ (succ x).
[x] add_aux Bit.1 (3_ x) 8 --> 2_ (succ x).
[x] add_aux Bit.0 (3_ x) 9 --> 2_ (succ x).
[x] add_aux Bit.1 (3_ x) 9 --> 3_ (succ x).
[x, y] add_aux Bit.0 (3_ x) (0_ y) --> 3_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (3_ x) (0_ y) --> 4_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.0 (3_ x) (1_ y) --> 4_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (3_ x) (1_ y) --> 5_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.0 (3_ x) (2_ y) --> 5_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (3_ x) (2_ y) --> 6_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.0 (3_ x) (3_ y) --> 6_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (3_ x) (3_ y) --> 7_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.0 (3_ x) (4_ y) --> 7_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (3_ x) (4_ y) --> 8_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.0 (3_ x) (5_ y) --> 8_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (3_ x) (5_ y) --> 9_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.0 (3_ x) (6_ y) --> 9_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (3_ x) (6_ y) --> 0_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.0 (3_ x) (7_ y) --> 0_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.1 (3_ x) (7_ y) --> 1_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.0 (3_ x) (8_ y) --> 1_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.1 (3_ x) (8_ y) --> 2_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.0 (3_ x) (9_ y) --> 2_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.1 (3_ x) (9_ y) --> 3_ (add_aux Bit.1 x y).
[x] add_aux Bit.0 (4_ x) 1 --> 5_ x.
[x] add_aux Bit.1 (4_ x) 1 --> 6_ x.
[x] add_aux Bit.0 (4_ x) 2 --> 6_ x.
[x] add_aux Bit.1 (4_ x) 2 --> 7_ x.
[x] add_aux Bit.0 (4_ x) 3 --> 7_ x.
[x] add_aux Bit.1 (4_ x) 3 --> 8_ x.
[x] add_aux Bit.0 (4_ x) 4 --> 8_ x.
[x] add_aux Bit.1 (4_ x) 4 --> 9_ x.
[x] add_aux Bit.0 (4_ x) 5 --> 9_ x.
[x] add_aux Bit.1 (4_ x) 5 --> 0_ (succ x).
[x] add_aux Bit.0 (4_ x) 6 --> 0_ (succ x).
[x] add_aux Bit.1 (4_ x) 6 --> 1_ (succ x).
[x] add_aux Bit.0 (4_ x) 7 --> 1_ (succ x).
[x] add_aux Bit.1 (4_ x) 7 --> 2_ (succ x).
[x] add_aux Bit.0 (4_ x) 8 --> 2_ (succ x).
[x] add_aux Bit.1 (4_ x) 8 --> 3_ (succ x).
[x] add_aux Bit.0 (4_ x) 9 --> 3_ (succ x).
[x] add_aux Bit.1 (4_ x) 9 --> 4_ (succ x).
[x, y] add_aux Bit.0 (4_ x) (0_ y) --> 4_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (4_ x) (0_ y) --> 5_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.0 (4_ x) (1_ y) --> 5_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (4_ x) (1_ y) --> 6_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.0 (4_ x) (2_ y) --> 6_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (4_ x) (2_ y) --> 7_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.0 (4_ x) (3_ y) --> 7_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (4_ x) (3_ y) --> 8_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.0 (4_ x) (4_ y) --> 8_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (4_ x) (4_ y) --> 9_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.0 (4_ x) (5_ y) --> 9_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (4_ x) (5_ y) --> 0_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.0 (4_ x) (6_ y) --> 0_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.1 (4_ x) (6_ y) --> 1_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.0 (4_ x) (7_ y) --> 1_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.1 (4_ x) (7_ y) --> 2_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.0 (4_ x) (8_ y) --> 2_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.1 (4_ x) (8_ y) --> 3_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.0 (4_ x) (9_ y) --> 3_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.1 (4_ x) (9_ y) --> 4_ (add_aux Bit.1 x y).
[x] add_aux Bit.0 (5_ x) 1 --> 6_ x.
[x] add_aux Bit.1 (5_ x) 1 --> 7_ x.
[x] add_aux Bit.0 (5_ x) 2 --> 7_ x.
[x] add_aux Bit.1 (5_ x) 2 --> 8_ x.
[x] add_aux Bit.0 (5_ x) 3 --> 8_ x.
[x] add_aux Bit.1 (5_ x) 3 --> 9_ x.
[x] add_aux Bit.0 (5_ x) 4 --> 9_ x.
[x] add_aux Bit.1 (5_ x) 4 --> 0_ (succ x).
[x] add_aux Bit.0 (5_ x) 5 --> 0_ (succ x).
[x] add_aux Bit.1 (5_ x) 5 --> 1_ (succ x).
[x] add_aux Bit.0 (5_ x) 6 --> 1_ (succ x).
[x] add_aux Bit.1 (5_ x) 6 --> 2_ (succ x).
[x] add_aux Bit.0 (5_ x) 7 --> 2_ (succ x).
[x] add_aux Bit.1 (5_ x) 7 --> 3_ (succ x).
[x] add_aux Bit.0 (5_ x) 8 --> 3_ (succ x).
[x] add_aux Bit.1 (5_ x) 8 --> 4_ (succ x).
[x] add_aux Bit.0 (5_ x) 9 --> 4_ (succ x).
[x] add_aux Bit.1 (5_ x) 9 --> 5_ (succ x).
[x, y] add_aux Bit.0 (5_ x) (0_ y) --> 5_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (5_ x) (0_ y) --> 6_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.0 (5_ x) (1_ y) --> 6_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (5_ x) (1_ y) --> 7_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.0 (5_ x) (2_ y) --> 7_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (5_ x) (2_ y) --> 8_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.0 (5_ x) (3_ y) --> 8_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (5_ x) (3_ y) --> 9_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.0 (5_ x) (4_ y) --> 9_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (5_ x) (4_ y) --> 0_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.0 (5_ x) (5_ y) --> 0_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.1 (5_ x) (5_ y) --> 1_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.0 (5_ x) (6_ y) --> 1_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.1 (5_ x) (6_ y) --> 2_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.0 (5_ x) (7_ y) --> 2_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.1 (5_ x) (7_ y) --> 3_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.0 (5_ x) (8_ y) --> 3_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.1 (5_ x) (8_ y) --> 4_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.0 (5_ x) (9_ y) --> 4_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.1 (5_ x) (9_ y) --> 5_ (add_aux Bit.1 x y).
[x] add_aux Bit.0 (6_ x) 1 --> 7_ x.
[x] add_aux Bit.1 (6_ x) 1 --> 8_ x.
[x] add_aux Bit.0 (6_ x) 2 --> 8_ x.
[x] add_aux Bit.1 (6_ x) 2 --> 9_ x.
[x] add_aux Bit.0 (6_ x) 3 --> 9_ x.
[x] add_aux Bit.1 (6_ x) 3 --> 0_ (succ x).
[x] add_aux Bit.0 (6_ x) 4 --> 0_ (succ x).
[x] add_aux Bit.1 (6_ x) 4 --> 1_ (succ x).
[x] add_aux Bit.0 (6_ x) 5 --> 1_ (succ x).
[x] add_aux Bit.1 (6_ x) 5 --> 2_ (succ x).
[x] add_aux Bit.0 (6_ x) 6 --> 2_ (succ x).
[x] add_aux Bit.1 (6_ x) 6 --> 3_ (succ x).
[x] add_aux Bit.0 (6_ x) 7 --> 3_ (succ x).
[x] add_aux Bit.1 (6_ x) 7 --> 4_ (succ x).
[x] add_aux Bit.0 (6_ x) 8 --> 4_ (succ x).
[x] add_aux Bit.1 (6_ x) 8 --> 5_ (succ x).
[x] add_aux Bit.0 (6_ x) 9 --> 5_ (succ x).
[x] add_aux Bit.1 (6_ x) 9 --> 6_ (succ x).
[x, y] add_aux Bit.0 (6_ x) (0_ y) --> 6_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (6_ x) (0_ y) --> 7_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.0 (6_ x) (1_ y) --> 7_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (6_ x) (1_ y) --> 8_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.0 (6_ x) (2_ y) --> 8_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (6_ x) (2_ y) --> 9_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.0 (6_ x) (3_ y) --> 9_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (6_ x) (3_ y) --> 0_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.0 (6_ x) (4_ y) --> 0_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.1 (6_ x) (4_ y) --> 1_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.0 (6_ x) (5_ y) --> 1_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.1 (6_ x) (5_ y) --> 2_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.0 (6_ x) (6_ y) --> 2_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.1 (6_ x) (6_ y) --> 3_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.0 (6_ x) (7_ y) --> 3_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.1 (6_ x) (7_ y) --> 4_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.0 (6_ x) (8_ y) --> 4_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.1 (6_ x) (8_ y) --> 5_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.0 (6_ x) (9_ y) --> 5_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.1 (6_ x) (9_ y) --> 6_ (add_aux Bit.1 x y).
[x] add_aux Bit.0 (7_ x) 1 --> 8_ x.
[x] add_aux Bit.1 (7_ x) 1 --> 9_ x.
[x] add_aux Bit.0 (7_ x) 2 --> 9_ x.
[x] add_aux Bit.1 (7_ x) 2 --> 0_ (succ x).
[x] add_aux Bit.0 (7_ x) 3 --> 0_ (succ x).
[x] add_aux Bit.1 (7_ x) 3 --> 1_ (succ x).
[x] add_aux Bit.0 (7_ x) 4 --> 1_ (succ x).
[x] add_aux Bit.1 (7_ x) 4 --> 2_ (succ x).
[x] add_aux Bit.0 (7_ x) 5 --> 2_ (succ x).
[x] add_aux Bit.1 (7_ x) 5 --> 3_ (succ x).
[x] add_aux Bit.0 (7_ x) 6 --> 3_ (succ x).
[x] add_aux Bit.1 (7_ x) 6 --> 4_ (succ x).
[x] add_aux Bit.0 (7_ x) 7 --> 4_ (succ x).
[x] add_aux Bit.1 (7_ x) 7 --> 5_ (succ x).
[x] add_aux Bit.0 (7_ x) 8 --> 5_ (succ x).
[x] add_aux Bit.1 (7_ x) 8 --> 6_ (succ x).
[x] add_aux Bit.0 (7_ x) 9 --> 6_ (succ x).
[x] add_aux Bit.1 (7_ x) 9 --> 7_ (succ x).
[x, y] add_aux Bit.0 (7_ x) (0_ y) --> 7_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (7_ x) (0_ y) --> 8_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.0 (7_ x) (1_ y) --> 8_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (7_ x) (1_ y) --> 9_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.0 (7_ x) (2_ y) --> 9_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (7_ x) (2_ y) --> 0_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.0 (7_ x) (3_ y) --> 0_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.1 (7_ x) (3_ y) --> 1_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.0 (7_ x) (4_ y) --> 1_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.1 (7_ x) (4_ y) --> 2_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.0 (7_ x) (5_ y) --> 2_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.1 (7_ x) (5_ y) --> 3_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.0 (7_ x) (6_ y) --> 3_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.1 (7_ x) (6_ y) --> 4_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.0 (7_ x) (7_ y) --> 4_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.1 (7_ x) (7_ y) --> 5_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.0 (7_ x) (8_ y) --> 5_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.1 (7_ x) (8_ y) --> 6_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.0 (7_ x) (9_ y) --> 6_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.1 (7_ x) (9_ y) --> 7_ (add_aux Bit.1 x y).
[x] add_aux Bit.0 (8_ x) 1 --> 9_ x.
[x] add_aux Bit.1 (8_ x) 1 --> 0_ (succ x).
[x] add_aux Bit.0 (8_ x) 2 --> 0_ (succ x).
[x] add_aux Bit.1 (8_ x) 2 --> 1_ (succ x).
[x] add_aux Bit.0 (8_ x) 3 --> 1_ (succ x).
[x] add_aux Bit.1 (8_ x) 3 --> 2_ (succ x).
[x] add_aux Bit.0 (8_ x) 4 --> 2_ (succ x).
[x] add_aux Bit.1 (8_ x) 4 --> 3_ (succ x).
[x] add_aux Bit.0 (8_ x) 5 --> 3_ (succ x).
[x] add_aux Bit.1 (8_ x) 5 --> 4_ (succ x).
[x] add_aux Bit.0 (8_ x) 6 --> 4_ (succ x).
[x] add_aux Bit.1 (8_ x) 6 --> 5_ (succ x).
[x] add_aux Bit.0 (8_ x) 7 --> 5_ (succ x).
[x] add_aux Bit.1 (8_ x) 7 --> 6_ (succ x).
[x] add_aux Bit.0 (8_ x) 8 --> 6_ (succ x).
[x] add_aux Bit.1 (8_ x) 8 --> 7_ (succ x).
[x] add_aux Bit.0 (8_ x) 9 --> 7_ (succ x).
[x] add_aux Bit.1 (8_ x) 9 --> 8_ (succ x).
[x, y] add_aux Bit.0 (8_ x) (0_ y) --> 8_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (8_ x) (0_ y) --> 9_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.0 (8_ x) (1_ y) --> 9_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (8_ x) (1_ y) --> 0_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.0 (8_ x) (2_ y) --> 0_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.1 (8_ x) (2_ y) --> 1_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.0 (8_ x) (3_ y) --> 1_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.1 (8_ x) (3_ y) --> 2_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.0 (8_ x) (4_ y) --> 2_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.1 (8_ x) (4_ y) --> 3_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.0 (8_ x) (5_ y) --> 3_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.1 (8_ x) (5_ y) --> 4_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.0 (8_ x) (6_ y) --> 4_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.1 (8_ x) (6_ y) --> 5_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.0 (8_ x) (7_ y) --> 5_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.1 (8_ x) (7_ y) --> 6_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.0 (8_ x) (8_ y) --> 6_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.1 (8_ x) (8_ y) --> 7_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.0 (8_ x) (9_ y) --> 7_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.1 (8_ x) (9_ y) --> 8_ (add_aux Bit.1 x y).
[x] add_aux Bit.0 (9_ x) 1 --> 0_ (succ x).
[x] add_aux Bit.1 (9_ x) 1 --> 1_ (succ x).
[x] add_aux Bit.0 (9_ x) 2 --> 1_ (succ x).
[x] add_aux Bit.1 (9_ x) 2 --> 2_ (succ x).
[x] add_aux Bit.0 (9_ x) 3 --> 2_ (succ x).
[x] add_aux Bit.1 (9_ x) 3 --> 3_ (succ x).
[x] add_aux Bit.0 (9_ x) 4 --> 3_ (succ x).
[x] add_aux Bit.1 (9_ x) 4 --> 4_ (succ x).
[x] add_aux Bit.0 (9_ x) 5 --> 4_ (succ x).
[x] add_aux Bit.1 (9_ x) 5 --> 5_ (succ x).
[x] add_aux Bit.0 (9_ x) 6 --> 5_ (succ x).
[x] add_aux Bit.1 (9_ x) 6 --> 6_ (succ x).
[x] add_aux Bit.0 (9_ x) 7 --> 6_ (succ x).
[x] add_aux Bit.1 (9_ x) 7 --> 7_ (succ x).
[x] add_aux Bit.0 (9_ x) 8 --> 7_ (succ x).
[x] add_aux Bit.1 (9_ x) 8 --> 8_ (succ x).
[x] add_aux Bit.0 (9_ x) 9 --> 8_ (succ x).
[x] add_aux Bit.1 (9_ x) 9 --> 9_ (succ x).
[x, y] add_aux Bit.0 (9_ x) (0_ y) --> 9_ (add_aux Bit.0 x y).
[x, y] add_aux Bit.1 (9_ x) (0_ y) --> 0_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.0 (9_ x) (1_ y) --> 0_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.1 (9_ x) (1_ y) --> 1_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.0 (9_ x) (2_ y) --> 1_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.1 (9_ x) (2_ y) --> 2_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.0 (9_ x) (3_ y) --> 2_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.1 (9_ x) (3_ y) --> 3_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.0 (9_ x) (4_ y) --> 3_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.1 (9_ x) (4_ y) --> 4_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.0 (9_ x) (5_ y) --> 4_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.1 (9_ x) (5_ y) --> 5_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.0 (9_ x) (6_ y) --> 5_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.1 (9_ x) (6_ y) --> 6_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.0 (9_ x) (7_ y) --> 6_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.1 (9_ x) (7_ y) --> 7_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.0 (9_ x) (8_ y) --> 7_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.1 (9_ x) (8_ y) --> 8_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.0 (9_ x) (9_ y) --> 8_ (add_aux Bit.1 x y).
[x, y] add_aux Bit.1 (9_ x) (9_ y) --> 9_ (add_aux Bit.1 x y).

def add : T -> T -> T.
[x, y] add x y --> add_aux Bit.0 x y.

def fromUnary : UnaryNat.T -> T.
[] fromUnary (UnaryNat.S UnaryNat.0) --> 1.
[x] fromUnary (UnaryNat.S (UnaryNat.S x)) --> succ (fromUnary (UnaryNat.S x)).

def toUnary : T -> UnaryNat.T.
[] toUnary 1 --> UnaryNat.1.
[] toUnary 2 --> UnaryNat.2.
[] toUnary 3 --> UnaryNat.3.
[] toUnary 4 --> UnaryNat.4.
[] toUnary 5 --> UnaryNat.5.
[] toUnary 6 --> UnaryNat.6.
[] toUnary 7 --> UnaryNat.7.
[] toUnary 8 --> UnaryNat.8.
[] toUnary 9 --> UnaryNat.9.
[x] toUnary (0_ x) --> UnaryNat.mult UnaryNat.10 (toUnary x).
[x] toUnary (1_ x) --> UnaryNat.add UnaryNat.1 (UnaryNat.mult UnaryNat.10 (toUnary x)).
[x] toUnary (2_ x) --> UnaryNat.add UnaryNat.2 (UnaryNat.mult UnaryNat.10 (toUnary x)).
[x] toUnary (3_ x) --> UnaryNat.add UnaryNat.3 (UnaryNat.mult UnaryNat.10 (toUnary x)).
[x] toUnary (4_ x) --> UnaryNat.add UnaryNat.4 (UnaryNat.mult UnaryNat.10 (toUnary x)).
[x] toUnary (5_ x) --> UnaryNat.add UnaryNat.5 (UnaryNat.mult UnaryNat.10 (toUnary x)).
[x] toUnary (6_ x) --> UnaryNat.add UnaryNat.6 (UnaryNat.mult UnaryNat.10 (toUnary x)).
[x] toUnary (7_ x) --> UnaryNat.add UnaryNat.7 (UnaryNat.mult UnaryNat.10 (toUnary x)).
[x] toUnary (8_ x) --> UnaryNat.add UnaryNat.8 (UnaryNat.mult UnaryNat.10 (toUnary x)).
[x] toUnary (9_ x) --> UnaryNat.add UnaryNat.9 (UnaryNat.mult UnaryNat.10 (toUnary x)).

def parseUnary (s : String.T) : UnaryNat.T := toUnary (parse s).
