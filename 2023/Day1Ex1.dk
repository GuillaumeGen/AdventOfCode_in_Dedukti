def getFirstLast_aux : String.T -> Maybe.T Char.tt -> Maybe.T Char.tt -> Pair.T Char.tt Char.tt.
def getFirstLast (s : String.T) : Pair.T Char.tt Char.tt := getFirstLast_aux s (Maybe.None Char.tt) (Maybe.None Char.tt).

[a, b] getFirstLast_aux (List.nil _) (Maybe.Just _ a) (Maybe.Just _ b) --> Pair.pair Char.tt Char.tt a b.
[a] getFirstLast_aux (List.nil _) (Maybe.Just _ a) (Maybe.None _) --> Pair.pair Char.tt Char.tt a a.
[x, tl] getFirstLast_aux (List.cons _ x tl) (Maybe.None _) _ --> Bool.if_then_else (Pair.t Char.tt Char.tt) (Char.is_digit x) (getFirstLast_aux tl (Maybe.Just Char.tt x) (Maybe.None Char.tt)) (getFirstLast_aux tl (Maybe.None Char.tt) (Maybe.None Char.tt))
[x, tl, a, b] getFirstLast_aux (List.cons _ x tl) (Maybe.Just _ a) b --> Bool.if_then_else (Pair.t Char.tt Char.tt) (Char.is_digit x) (getFirstLast_aux tl (Maybe.Just Char.tt a) (Maybe.Just Char.tt x)) (getFirstLast_aux tl (Maybe.Just Char.tt a) b).

def 10xplus (a : UnaryNat.T) (b : UnaryNat.T) := DecimalNat.fromUnary (UnaryNat.add (UnaryNat.mult a UnaryNat.10) b).

def numFromFirstAndLast (s : String.T) : DecimalNat.T := Pair.uncurry UnaryNat.t UnaryNat.t DecimalNat.t 10xplus (Pair.second UnaryNat.t Char.tt UnaryNat.t UnaryNat.parseChar (Pair.first Char.tt UnaryNat.t Char.tt UnaryNat.parseChar (getFirstLast s))).

def nums := List.map String.t DecimalNat.t numFromFirstAndLast (String.lines Input1.content).

def result := List.fold_left DecimalNat.t DecimalNat.t DecimalNat.add DecimalNat.0 nums.

#EVAL (DecimalNat.print result).
